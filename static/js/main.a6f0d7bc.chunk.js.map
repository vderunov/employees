{"version":3,"sources":["store/actions/actionTypes.js","utility.js","App.js","store/actions/actions.js","reportWebVitals.js","store/reducers/bdayEmployees.js","index.js"],"names":["ADD_SELECTED_EMPLOYEE","GET_EMPLOYEE_FROM_LOCALSTORAGE","SAVE_CHECKED_INPUT","englishAlphabet","months","saveDataToLocalStorage","key","data","localStorage","setItem","JSON","stringify","getDataFromLocalStorage","parse","getItem","removeDuplicates","originalArray","prop","newArray","lookupObject","length","i","push","updateObject","oldObject","updatedProperties","Input","id","handleChange","type","name","onChange","e","Employee","lastName","firstName","fullBirthDate","birthDate","className","BoxAlphabetical","listOfEmployees","letter","employeesByLetter","useContext","PersonContext","map","employee","BoxBirthdays","employees","month","monthIndex","createContext","connect","bdayEmployees","checkedInputs","dispatch","onAddedSelectedEmployee","bdayUserActions","birthdaysAction","onGetEmployeeFromLocalStorage","onSaveCheckedInput","input","useState","sortedEmployeesInAlphabetical","setSortedEmployeesInAlphabetical","randomEmployees","setRandomEmployees","arraySelectedEmployee","useRef","inputsNods","useEffect","url","axios","get","then","catch","error","console","employeesDatLocalStorage","inputsFromLocalStorage","current","filter","el","flat","slice","selector","document","querySelectorAll","inputs","checkedInputsObj","inputNode","checked","setInputsCheckedAfterReload","sortedEmployees","sortedEmployeesAlphabetically","sort","a","b","toLowerCase","sortEmployeesAlphabetically","separatedEmployees","array","letterWrapper","index","toUpperCase","toString","birthdayList","useMemo","bdaysList","Provider","value","event","target","inputObj","selectedEmployee","find","checkedArray","arr","indexOf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","createArrayWithEmployeeByBDayMonth","Array","fill","forEach","d","Date","dob","year","getFullYear","getMonth","date","getDate","monthName","getDateFormat","employeeObj","reducer","state","action","birthdayUserActions","uniqueArray","store","createStore","bdayEmployeesReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a6f0d7bc.chunk.js","sourcesContent":["export const ADD_SELECTED_EMPLOYEE = 'ADD_SELECTED_EMPLOYEE';\nexport const GET_EMPLOYEE_FROM_LOCALSTORAGE = 'GET_EMPLOYEE_FROM_LOCALSTORAGE';\nexport const SAVE_CHECKED_INPUT = 'SAVE_CHECKED_INPUT';\n","export const englishAlphabet = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n];\n\nexport const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n];\n\nexport const sortEmployeesAlphabetically = (randomEmployees) => {\n    return randomEmployees.sort((a, b) => {\n        if (a.lastName.toLowerCase() < b.lastName.toLowerCase()) return -1;\n        if (a.lastName.toLowerCase() > b.lastName.toLowerCase()) return 1;\n        return 0;\n    });\n};\n\nexport const createArrayWithEmployeesAlphabeticallySeparated = (sortedEmployees) => {\n    return englishAlphabet.map((letter) => {\n        const array = [];\n        const length = sortedEmployees.length - 1;\n\n        for (let i = 0; i <= length; i++) {\n            const lastNameFirstLatter = sortedEmployees[i].lastName[0].toLowerCase();\n            if (lastNameFirstLatter === letter) {\n                array.push(sortedEmployees[i]);\n            }\n        }\n\n        return array;\n    });\n};\n\nexport const saveDataToLocalStorage = (key, data) => localStorage.setItem(key, JSON.stringify(data));\nexport const getDataFromLocalStorage = (key) => JSON.parse(localStorage.getItem(key));\nexport const getNodsBySelector = (selector) => document.querySelectorAll(selector);\n\nexport const getDateFormat = (employee) => {\n    const d = new Date(employee.dob);\n    const year = d.getFullYear();\n    const monthIndex = d.getMonth();\n    const date = d.getDate();\n    const monthName = months[monthIndex];\n    const fullBirthDate = `${date} ${monthName}, ${year} year`;\n\n    return { monthIndex, fullBirthDate };\n};\n\nexport const checkDuplicates = (employees) => {\n    if (employees.length === 1) {\n        return employees;\n    } else {\n        return employees.filter((employee, index, arr) => arr.indexOf(employee) === index);\n    }\n};\n\nexport const removeDuplicates = (originalArray, prop) => {\n    const newArray = [];\n    const lookupObject = {};\n    const length = originalArray.length - 1;\n\n    for (let i = 0; i <= length; i++) {\n        lookupObject[originalArray[i][prop]] = originalArray[i];\n    }\n\n    for (let i in lookupObject) {\n        newArray.push(lookupObject[i]);\n    }\n\n    return newArray;\n};\n\nexport const createFlatCopyCollectionWithoutDuplicates = (data) => {\n    return data\n        .filter((el) => el.length !== 0)\n        .flat()\n        .slice();\n};\n\nexport const setInputsCheckedAfterReload = (inputs, checkedInputsObj) => {\n    if (inputs.length !== 0) {\n        for (let id in checkedInputsObj) {\n            for (let inputNode of inputs) {\n                if (id === inputNode.name) {\n                    inputNode.checked = true;\n                }\n            }\n        }\n    }\n};\n\nexport const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties,\n    };\n};\n","import { useEffect, useState, createContext, useContext, useMemo, useRef } from 'react';\n\nimport { connect } from 'react-redux';\nimport './App.css';\nimport axios from 'axios';\nimport * as birthdaysAction from './store/actions/actions';\nimport {\n    englishAlphabet,\n    months,\n    checkDuplicates,\n    createArrayWithEmployeesAlphabeticallySeparated,\n    createFlatCopyCollectionWithoutDuplicates,\n    sortEmployeesAlphabetically,\n    setInputsCheckedAfterReload,\n    getNodsBySelector,\n    getDataFromLocalStorage,\n    saveDataToLocalStorage,\n} from './utility';\n\nconst url = 'https://yalantis-react-school-api.yalantis.com/api/task0/users';\n\nconst fetchEmployees = (url) => {\n    return axios\n        .get(url)\n        .then(({ data }) => data)\n        .catch((error) => console.error(error));\n};\n\nconst Input = ({ id, handleChange }) => <input type=\"checkbox\" name={id} onChange={(e) => handleChange(e, id)} />;\n\nconst Employee = ({ lastName, firstName, fullBirthDate }) => {\n    const birthDate = fullBirthDate ? `- ${fullBirthDate}` : null;\n\n    return (\n        <li className=\"employeeWrapper\">\n            <p>\n                {lastName} {firstName} {birthDate}\n            </p>\n        </li>\n    );\n};\n\nconst BoxAlphabetical = ({ letter, employeesByLetter }) => {\n    const { handleChange } = useContext(PersonContext);\n    let listOfEmployees;\n\n    if (employeesByLetter.length >= 1) {\n        listOfEmployees = employeesByLetter.map((employee) => {\n            const { id } = employee;\n            return (\n                <ul key={id} className=\"name_wrapper\">\n                    <Employee {...employee} />\n                    <Input id={id} handleChange={handleChange} />\n                </ul>\n            );\n        });\n    } else {\n        listOfEmployees = <span>----</span>;\n    }\n\n    return (\n        <div className=\"letter_wrapper\">\n            <p>{letter}</p>\n            {listOfEmployees}\n        </div>\n    );\n};\n\nconst BoxBirthdays = ({ employees }) => {\n    const month = months[employees[0].monthIndex];\n    const listOfEmployees = employees.map((employee) => <Employee key={employee.id} {...employee} />);\n\n    return (\n        <>\n            <p className=\"month\">{month}</p>\n            <ul className=\"birthday_wrapper\">{listOfEmployees}</ul>\n        </>\n    );\n};\n\nconst PersonContext = createContext();\n\nfunction App({\n    onAddedSelectedEmployee,\n    bdayEmployees,\n    onGetEmployeeFromLocalStorage,\n    onSaveCheckedInput,\n    checkedInputs,\n}) {\n    const [sortedEmployeesInAlphabetical, setSortedEmployeesInAlphabetical] = useState([]);\n    const [randomEmployees, setRandomEmployees] = useState([]);\n    const arraySelectedEmployee = useRef([]);\n    const inputsNods = useRef([]);\n\n    useEffect(() => {\n        fetchEmployees(url).then((randomEmployees) => setRandomEmployees(randomEmployees));\n        const employeesDatLocalStorage = getDataFromLocalStorage('bdayEmployees') || [];\n        const inputsFromLocalStorage = getDataFromLocalStorage('checkedInputs');\n        arraySelectedEmployee.current = createFlatCopyCollectionWithoutDuplicates(employeesDatLocalStorage);\n        onSaveCheckedInput(inputsFromLocalStorage);\n        onGetEmployeeFromLocalStorage(employeesDatLocalStorage);\n    }, [onGetEmployeeFromLocalStorage, onSaveCheckedInput]);\n\n    useEffect(() => {\n        if (inputsNods.current.length <= 0) {\n            inputsNods.current = getNodsBySelector('input');\n        }\n        setInputsCheckedAfterReload(inputsNods.current, checkedInputs);\n    });\n\n    useEffect(() => {\n        const sortedEmployeesAlphabetically = sortEmployeesAlphabetically(randomEmployees);\n        const separatedEmployees = createArrayWithEmployeesAlphabeticallySeparated(sortedEmployeesAlphabetically);\n        setSortedEmployeesInAlphabetical(separatedEmployees);\n    }, [randomEmployees]);\n\n    useEffect(() => {\n        saveDataToLocalStorage('bdayEmployees', bdayEmployees);\n        saveDataToLocalStorage('checkedInputs', checkedInputs);\n    }, [bdayEmployees, checkedInputs]);\n\n    const handleChange = (event, id) => {\n        const input = event.target;\n        const value = input.type === 'checkbox' ? input.checked : input.value;\n        const inputObj = {\n            [input.name]: value,\n        };\n        onSaveCheckedInput(inputObj);\n        const selectedEmployee = randomEmployees.find((employee) => employee.id === id);\n        arraySelectedEmployee.current.push(selectedEmployee);\n        const checkedArray = checkDuplicates(arraySelectedEmployee.current);\n        onAddedSelectedEmployee(checkedArray);\n    };\n\n    const letterWrapper = sortedEmployeesInAlphabetical.map((employeesByLetter, index) => {\n        const letter = englishAlphabet[index].toUpperCase();\n        return <BoxAlphabetical key={index.toString()} letter={letter} employeesByLetter={employeesByLetter} />;\n    });\n\n    const birthdayList = useMemo(\n        () =>\n            bdayEmployees.map((employees, index) => {\n                return employees.length >= 1 ? (\n                    <BoxBirthdays key={index.toString()} month={index} employees={employees} />\n                ) : null;\n            }),\n        [bdayEmployees],\n    );\n\n    const bdaysList = birthdayList.length === 0 ? <p className=\"no_selected\">No selected employees</p> : birthdayList;\n\n    return (\n        <div className=\"main_wrapper\">\n            <PersonContext.Provider value={{ handleChange }}>\n                <section className=\"section_wrapper\">\n                    <h3>Employees</h3>\n                    <div className=\"alphabetical_wrapper\">{letterWrapper}</div>\n                </section>\n            </PersonContext.Provider>\n            <section className=\"section_wrapper\">\n                <h3>Employees birthday</h3>\n                <hr />\n                {bdaysList}\n            </section>\n        </div>\n    );\n}\n\nconst mapStateToProps = ({ bdayEmployees, checkedInputs }) => {\n    return {\n        bdayEmployees,\n        checkedInputs,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddedSelectedEmployee: (employee) => dispatch(birthdaysAction.addSelectedEmployee(employee)),\n        onGetEmployeeFromLocalStorage: (employee) => dispatch(birthdaysAction.getEmployeeFromLocalStorage(employee)),\n        onSaveCheckedInput: (input) => dispatch(birthdaysAction.saveCheckedInput(input)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as bdayUserActions from './actionTypes';\n\nexport const addSelectedEmployee = (employee) => {\n    return {\n        type: bdayUserActions.ADD_SELECTED_EMPLOYEE,\n        employee,\n    };\n};\n\nexport const getEmployeeFromLocalStorage = (employee) => {\n    return {\n        type: bdayUserActions.GET_EMPLOYEE_FROM_LOCALSTORAGE,\n        employee,\n    };\n};\n\nexport const saveCheckedInput = (input) => {\n    return {\n        type: bdayUserActions.SAVE_CHECKED_INPUT,\n        input,\n    };\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as birthdayUserActions from '../actions/actionTypes';\nimport { getDateFormat, removeDuplicates, updateObject } from '../../utility';\n\nconst initialState = {\n    bdayEmployees: [],\n    checkedInputs: null,\n};\n\nconst createArrayWithEmployeeByBDayMonth = (bdayEmployees) => {\n    let newArray = new Array(12).fill([]);\n    bdayEmployees.forEach((employee) => {\n        const { monthIndex, fullBirthDate } = getDateFormat(employee);\n        const employeeObj = {\n            ...employee,\n            fullBirthDate,\n            monthIndex,\n        };\n        newArray[monthIndex] = [...newArray[monthIndex], employeeObj];\n    });\n\n    return newArray;\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case birthdayUserActions.ADD_SELECTED_EMPLOYEE:\n            const uniqueArray = removeDuplicates(action.employee, 'id');\n            return updateObject(state, { bdayEmployees: [...createArrayWithEmployeeByBDayMonth(uniqueArray)] });\n        case birthdayUserActions.GET_EMPLOYEE_FROM_LOCALSTORAGE:\n            return updateObject(state, { bdayEmployees: [...action.employee] });\n        case birthdayUserActions.SAVE_CHECKED_INPUT:\n            return updateObject(state, { checkedInputs: { ...state.checkedInputs, ...action.input } });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport bdayEmployeesReducer from './store/reducers/bdayEmployees';\n\nconst store = createStore(bdayEmployeesReducer);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}